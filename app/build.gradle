apply plugin: 'android-sdk-manager'
apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.1"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        release {
            def Properties localProps = new Properties()
            localProps.load(new FileInputStream(file('../local.properties')))
            def Properties keyProps = new Properties()
            keyProps.load(new FileInputStream(file(localProps['keystore.props.file'])))
            storeFile file(keyProps["store"])
            keyAlias keyProps["alias"]
            storePassword keyProps["storePass"]
            keyPassword keyProps["pass"]
        }
    }

    buildTypes {
        travis.initWith(buildTypes.debug)
        travis {
            applicationIdSuffix ".travis"
            versionNameSuffix "-travis"
            debuggable true
            buildConfigField "String", "READABILITY_TOKEN", String.valueOf("null")
            buildConfigField "boolean", "TRAVIS", 'true'
        }
        debug.initWith(buildTypes.debug)
        debug {
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            def Properties localProps = new Properties()
            localProps.load(new FileInputStream(file('../local.properties')))
            def Properties keyProps = new Properties()
            keyProps.load(new FileInputStream(file(localProps['readability.props.file'])))
            buildConfigField "String", "READABILITY_TOKEN", String.valueOf("\""+keyProps["token"].toString()+"\"")
            buildConfigField "boolean", "TRAVIS", 'false'
        }
        release {
            runProguard false
            def Properties localProps = new Properties()
            localProps.load(new FileInputStream(file('../local.properties')))
            def Properties keyProps = new Properties()
            keyProps.load(new FileInputStream(file(localProps['readability.props.file'])))
            buildConfigField "String", "READABILITY_TOKEN", String.valueOf("\""+keyProps["token"].toString()+"\"")
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
            buildConfigField "boolean", "TRAVIS", 'false'
        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:19.+'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':app:libs:showcaseview')
    compile project(':app:libs:FloatingActionButton')
    compile 'com.squareup.retrofit:retrofit:1.5.0'
    compile 'com.github.johnkil.android-robototextview:robototextview:2.0.0'
    compile 'com.nhaarman.listviewanimations:library:2.6.0'
    compile 'com.facebook.rebound:rebound:0.3.4'
    compile 'com.jakewharton:butterknife:5.1.1'
}

android.applicationVariants.all{ variant ->
    variant.mergeAssets.doFirst {
        File fonts = file("${rootDir}/build/exploded-aar/com.github.johnkil.android-robototextview/robototextview/2.0.1/assets/fonts")
        if (fonts.exists()) {
            for (File file : fonts.listFiles()) {
                if (file.getName().contains("RobotoSlab")) {
                    println("delete " + file.getName() + " font")
                    file.delete()
                };
                if (file.getName().contains("Roboto-Black")) {
                    println("delete " + file.getName() + " font")
                    file.delete()
                };
                if (file.getName().contains("RobotoCondensed")) {
                    println("delete " + file.getName() + " font")
                    file.delete()
                };
            }
        }
    }
}
